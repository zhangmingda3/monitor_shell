###位置在/usr/local/nginx/conf/nginx.conf
#-*- coding:utf8 -*-
#user  nobody;		##进程所有者
worker_processes  1;	##起几个进程一般最多改为和cpu内核数相同的数量

#error_log  logs/error.log;	##日志
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;
events {
    worker_connections  1024;	##一个进程的并发访问量量 为1024
}

###配置中每句话以；号结尾
http {		######################http括号开始##############
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    upstream test{	########定义非缓存代理服务器时后端服务器ip及端口设置
	ip_hash;	####修改调度算法为ip_hash;同一个用户刷新时会固定在一台后端的服务器上提供服务，避免出现重新登录状况
    server 192.168.2.100:80;	##多个轮寻默认自动轮寻分配均衡负载，可设置weight=2[或其他数字]，谁的权重大访问次数就越多。
    server 192.168.2.200:80 max_fail=2  fail_timeout=30;	##允许请求失败的次数，请求2次失败后，30秒内不再连接你
    }				####端口后 标记为down;的暂时不用
				####端口后 标记为backup;的为备份的一般有高可用服务器就不用这个选项
    server {		#定义虚拟主机	######server括号开始#################
        listen       80;	##监听端口
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {		###定义目录了
		proxy_pass http://test	####作为代理服务器时调用后端服务组
            root   html;	###定义网页文档根目录
            index  index.html index.htm;  ###首页文件名
		#deny 192.168.2.5;	###拒绝访问的ip
		allow 192.168.2.254;	###允许访问的客户机ip或者网段或者NDS
		deny all;		###拒绝所有，忧伤到下依次匹配
		auth_basic "请输入用户名密码";	###使用密码登录的提示配置
		auth_basic_user_file "/usr/local/nginx/conf/users.txt";	##用户名密码文件位置
	    rewrite a\.html /b.html;	###相同目录地址重写功能,用户地址栏含有a.html自动正则匹配转到b.html
	    rewrite a\.html /test/c.html; ###不同目录的地址重写,自动跳转
        }
	if ($http_user_agent ~ curl){	###如果访问方式(变量)正则匹配"curl"
	rewrite /(.*) /curl/$1;
	}
	location ~* \.(jpg|png|gif)$ {	###正则匹配以()内结尾的文件
		expires 30d;	###设置客户机以上匹配的缓存时间天数##客户机访问后会缓存在浏览器内,有效期内不连网就能访问
		valid_referers www.tarena.com;	###防盗链
		if($valid_referers){
		rewrite ^/ http://www.tarena.com/403.html
		}
	}	

        error_page  404              /404.html;	##访问出错时对应代码的返回页面

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #			####配置php网页解释对指配置
        location ~ \.php$ {	####匹配以".php"结尾的网页
            root           html;	####网页文档根目录
            fastcgi_pass   127.0.0.1:9000;  ##指定php服务器ip和端口
            fastcgi_index  index.php;	   ####默认php网页首页
            include        fastcgi.conf;   ###包含其他的配置文件
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }	###################server括号结束##############
#########################第二台虚拟主机##########################################
    server {
        listen       888;	###基于端口的虚拟主机设置
        server_name  www.a.com;	###基于域名的虚拟主机设置

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   aweb;	###网页文档根目录
            index  index.html index.htm;  ###首页文件名
		#deny 192.168.2.5;	###拒绝访问的ip
		#allow 192.168.2.254;
		#deny all;
		auth_basic "请输入用户名密码";	###使用密码
		auth_basic_user_file "/usr/local/nginx/conf/users.txt";	##用户名密码文件位置
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
#########################第二台虚拟主机配置结束#################################################

########################第三台虚拟主机配置开始###################################
    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    server {
        listen       8888;
        server_name  www.b.com;

        location / {
            root   bweb;
            index  index.html index.htm;
        }
    }

######################第三态虚拟主机配置结束###########################################
    # HTTPS server
    #
    server {
        listen       443 ssl;	###加密网站监听端口：如银行
        server_name  www.c.com;
				###私钥和证书生成方法cd到/usr/local/nginx/conf目录； 
				###生成私钥openssl genrsa -out my.key 2048
				###生成证书 openssl req -new -x509 -key my.key -out my.crt
        ssl_certificate      my.crt;	####证书名称，位置在/usr/local/nginx/conf目录下
        ssl_certificate_key  my.key;	####私钥名称，位置在/usr/local/nginx/conf目录下

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        location / {
            root   html;
            index  index.html index.htm;
        }
    }

}	###########http括号结束#################################
